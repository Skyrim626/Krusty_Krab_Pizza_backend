Trigger 1: Update Runner's Registration Date
This trigger automatically updates the registration date of a runner whenever a new record is inserted into the "runners" table.

DELIMITER $$
CREATE TRIGGER update_runner_registration_date
AFTER INSERT ON runners
FOR EACH ROW
BEGIN
    UPDATE runners
    SET registration_date = CURRENT_TIMESTAMP
    WHERE runner_id = NEW.runner_id;
END $$

DELIMITER ;



Trigger 2: Prevent Duplicate Pizza Toppings
This trigger prevents the insertion of duplicate toppings for a pizza in the "pizza_toppings" table.


DELIMITER $$
CREATE TRIGGER prevent_duplicate_toppings
BEFORE INSERT ON pizza_toppings
FOR EACH ROW
BEGIN
    -- Check if the topping already exists for the pizza
    IF EXISTS (
        SELECT 1
        FROM pizza_toppings
        WHERE topping_id = NEW.topping_id
        AND topping_name = NEW.topping_name
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Duplicate topping for pizza.';
    END IF;
END $$

DELIMITER ;




Trigger 3: Cancelled Orders will be inserted in an audit table
This trigger automatically inserts to the "audit_table" whenever there is an order that is cancelled.

DELIMITER $$
CREATE TRIGGER after_update_on_runners_orders
AFTER UPDATE ON pizza_runners
BEGIN
	IF NEW.cancellation = 'NaN' OR NEW.cancellation is NULL OR NEW.cancellation LIKE 'Cancellation%' THEN
		INSERT INTO audit_table VALUES(NEW.order_id, NEW.runner_id, CURRENT_TIME, CURRENT_DATE);
    END IF;

END $$
DELIMITER ;